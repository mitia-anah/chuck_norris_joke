{"version":3,"sources":["component/GlobalState.tsx","images/chuck-norris.png","component/Header.tsx","component/DrawJokeButton.tsx","component/RandomJokes.tsx","component/Impersonate.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RANDOM_JOKES","initialState","jokes","categories","randomJoke","firstName","lastName","dispatch","getJokes","GlobalContext","createContext","reducer","state","action","type","payload","impersonateFirstName","impersonateLastName","GlobalProvider","children","useReducer","a","fetch","res","json","data","useEffect","Provider","value","Header","src","chucPhoto","Button","styled","button","DrawJokeButton","useContext","onClick","Text","p","RandomJokes","console","log","map","joke","id","Form","form","Impersonate","firstNameValue","lastNameValue","e","preventDefault","eventTarget","currentTarget","impersonate","trim","split","shift","slice","join","response","result","onSubmit","placeholder","name","onChange","target","Wrapper","div","MainScreen","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08a0062a.chunk.js","sourcesContent":["import React, { createContext , useEffect, useReducer, useState} from 'react'\r\n\r\nexport const RANDOM_JOKES = 'https://api.icndb.com/jokes/random'\r\nconst CATEGORY = 'https://api.icndb.com/categories'\r\n\r\ntype Joke = {\r\n    joke: string\r\n}\r\ntype Category ={\r\n    type: string,\r\n    value: string[]\r\n}\r\n\r\ntype JokesProps = {\r\n    type: string,\r\n    value: {\r\n        id: number,\r\n        joke: Joke[],\r\n        categories: Category[]\r\n    },\r\n}; \r\n\r\ntype State = {\r\n    jokes: JokesProps[],\r\n    categories: Category[],\r\n    randomJoke: JokesProps[],\r\n    firstName: string,\r\n    lastName: string,\r\n    dispatch: React.Dispatch<any>,\r\n    getJokes: () => void,\r\n}\r\nconst initialState: State = {\r\n    jokes: [],\r\n    categories: [],\r\n    randomJoke: [],\r\n    firstName: 'Chuck',\r\n    lastName: 'Norris',\r\n    dispatch: () => null,\r\n    getJokes: () => {}\r\n};\r\n\r\ntype Action = \r\n  | {type: \"JOKES\", jokes: JokesProps[]}\r\n  | {type: \"GET_RANDOM_JOKES\", randomJoke: JokesProps[]}\r\n  | {type: \"SELECT_CATEGORY_LIST\", payload: Category[]}\r\n  | {type: \"IMPERSONATE_VALUE\", impersonateFirstName: string, impersonateLastName: string}\r\n\r\nexport const GlobalContext = createContext(initialState)\r\n\r\nfunction reducer(state: State, action: Action) {\r\n    switch (action.type) {\r\n        case 'JOKES':\r\n            return {...state, jokes: action.jokes}\r\n        case 'GET_RANDOM_JOKES':\r\n            return { ...state, randomJoke: action.randomJoke}\r\n        case 'SELECT_CATEGORY_LIST':\r\n            return {...state, categories: action.payload}   \r\n        case 'IMPERSONATE_VALUE':\r\n            return {\r\n                ...state,\r\n                firstName: action.impersonateFirstName,\r\n                lastName: action.impersonateLastName,\r\n            } \r\n        default:\r\n           return state\r\n    }\r\n}\r\nexport const GlobalProvider: React.FC = ({children}) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState)  \r\n\r\n    async function getJokes() {\r\n        const res = await fetch(RANDOM_JOKES)\r\n        const data = await res.json()\r\n        // dispatch({type: \"JOKES\", jokes: [data]}) \r\n        dispatch({type: \"GET_RANDOM_JOKES\", randomJoke: [data]}) \r\n    }\r\n    // async function getCategory() {\r\n    //     const res = await fetch(CATEGORY)\r\n    //     const data = await res.json()\r\n    //     dispatch({type: \"SELECT_CATEGORY_LIST\", payload: [data]})\r\n    // }\r\n\r\n    useEffect(() => {\r\n        getJokes()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[])\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{ \r\n            jokes: state.jokes,\r\n            randomJoke: state.randomJoke,\r\n            categories: state.categories,\r\n            firstName: state.firstName,\r\n            lastName: state.lastName,\r\n            getJokes,\r\n            dispatch,\r\n            }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/chuck-norris.9eb3434a.png\";","import chucPhoto from '../images/chuck-norris.png'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <img src={chucPhoto}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Header\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from './GlobalState'\r\nimport styled from 'styled-components'\r\n\r\nconst Button = styled.button`\r\n  width: 79.10%;\r\n  color: #fff;\r\n  border: solid 1px;\r\n  border-radius: 6px;\r\n  background-color: #34394f; \r\n  padding: 20.5px;\r\n  margin: auto;\r\n  cursor: pointer;\r\n`;\r\n\r\nfunction DrawJokeButton() {\r\n  const context = useContext(GlobalContext)\r\n  const {getJokes} = context\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={getJokes} type=\"submit\">\r\n        Draw a Chuck Norris Joke\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\nexport default DrawJokeButton","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport {GlobalContext} from './GlobalState'\r\n\r\n\r\nconst Text = styled.p`\r\n    max-width: 439px;\r\n    font-family: Inter;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    font-stretch: normal;\r\n    font-style: italic;\r\n    line-height: normal;\r\n    letter-spacing: normal;\r\n    text-align: left;\r\n    margin-inline-start: 58px;\r\n    color: #34394f;\r\n`;\r\nfunction RandomJokes() {\r\n    const context = useContext(GlobalContext);\r\n    const {randomJoke} = context;\r\n    console.log(randomJoke.map(joke => joke.value.joke));\r\n        \r\n    return (\r\n        <div>\r\n            {randomJoke.map(joke => (\r\n                <Text key={joke.value.id}>\r\n                    {joke.value.joke}\r\n                </Text>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default RandomJokes","import React, { useContext, useState } from 'react'\r\nimport DrawJokeButton from './DrawJokeButton';\r\nimport { GlobalContext } from './GlobalState';\r\nimport RandomJokes from './RandomJokes';\r\nimport styled from 'styled-components';\r\nimport {RANDOM_JOKES} from './GlobalState'\r\n\r\nfunction Impersonate() {\r\n  const {categories,jokes, dispatch, firstName, lastName} = useContext(GlobalContext);\r\n\r\nlet firstNameValue = ''\r\nlet lastNameValue = ''\r\n\r\nasync function handleOnSubmit(e: any) {\r\n  e.preventDefault()\r\n  const eventTarget = e.currentTarget.impersonate.value\r\n  if (eventTarget.trim() === '') {\r\n    firstNameValue = 'Chuck'\r\n    lastNameValue = 'Norris'\r\n  } else if (eventTarget.trim() !== '') {\r\n    firstNameValue = eventTarget.split(' ').shift()\r\n    lastNameValue = eventTarget.split(' ').slice(1).join(' ')\r\n  }\r\n  dispatch({\r\n    type: 'IMPERSONATE_VALUE',\r\n    impersonateFirstName: firstNameValue,\r\n    impersonateLastName: lastNameValue,\r\n  })\r\n  const response = await fetch(\r\n    `${RANDOM_JOKES}?firstName=${firstNameValue}&lastName=${lastNameValue}`\r\n  )\r\n  const result = await response.json()\r\n  dispatch({\r\n    type: 'JOKES',\r\n    jokes: result,\r\n  })\r\n  console.log(result);\r\n  \r\n}\r\n\r\n  \r\n\r\n  return (\r\n    <Form onSubmit={handleOnSubmit}>\r\n      <RandomJokes/>\r\n      <fieldset>\r\n        <label>Categories</label>\r\n        {/* <select placeholder=\"Categories\" onClick={dropDownForCategory} id=\"\">\r\n        <option>{categoryList}</option>\r\n        </select> */}\r\n      </fieldset>\r\n      <input type=\"text\" placeholder=\"Impersonate Chuck Norris\" name=\"impersonate\" onChange={(e) => dispatch(e.target.value)}/>\r\n    <DrawJokeButton/>\r\n    </Form>\r\n  )\r\n}\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  \r\n  fieldset{\r\n    display: flex;\r\n    flex-directifon: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    width: 72.98%;\r\n    height: 24px;\r\n    padding: 16px;\r\n    border: solid 1px gray;\r\n    background-color: #fff; \r\n    border-radius: 6px;\r\n    margin: auto;\r\n\r\n    label {\r\n      font-size: 16px;\r\n      font-weight: normal;\r\n      font-stretch: normal;\r\n      font-style: normal;\r\n      line-height: 1.63;\r\n      color: grey;\r\n    }\r\n  }\r\n  \r\n  input {\r\n    width: 72.98%;\r\n    height: 24px;\r\n    padding: 16px;\r\n    border: solid 1px gray;\r\n    background-color: #fff; \r\n    margin:auto; \r\n    border-radius: 6px;\r\n  }\r\n`;\r\n\r\nexport default Impersonate","import React from 'react';\nimport './App.css';\nimport Category from './component/Category';\nimport DrawJokeButton from './component/DrawJokeButton';\nimport { GlobalProvider } from './component/GlobalState'\nimport Header from './component/Header';\nimport styled from 'styled-components'\nimport Impersonate from './component/Impersonate';\n// import RandomJokes from './component/RandomJokes';\n\nconst Wrapper = styled.div`\n  background-color: #f9f9f9;\n  padding-top: 98px;\n  padding-bottom: 98px;\n`;\n\nconst MainScreen = styled.div`\n  background-color: #fff;\n  width: 555px;\n  margin:auto;\n  height: 704px;\n  padding-block-start: 48px;\n  padding-block-end: 72px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.08);\n`;\n\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Wrapper className=\"App\">\n          <MainScreen>\n            <Header />\n            {/* <Category />  */}\n            <Impersonate/>\n          </MainScreen>\n      </Wrapper>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}